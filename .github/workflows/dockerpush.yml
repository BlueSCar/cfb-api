name: Docker

on:
  push:
    # Publish `master` as Docker `latest` image.
    branches:
      - master

    # Publish `v1.2.3` tags as releases.
    tags:
      - v*

  # Run tests for any PRs.
  pull_request:

env:
  # TODO: Change variable to your image's name.
  IMAGE_NAME: cfb-api

jobs:
  # Run tests.
  # See also https://docs.docker.com/docker-hub/builds/automated-testing/
  test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Run tests
        run: |
          if [ -f docker-compose.test.yml ]; then
            docker-compose --file docker-compose.test.yml build
            docker-compose --file docker-compose.test.yml run sut
          else
            docker build . --file Dockerfile
          fi

  # Push image to GitHub Package Registry.
  # See also https://docs.docker.com/docker-hub/builds/
  push:
    # Ensure test job passes before pushing image.
    needs: test

    runs-on: ubuntu-latest
    if: github.event_name == 'push'

    steps:
      - uses: actions/checkout@v2

      - name: Build image
        run: docker build . --file Dockerfile --tag image

      - name: Log into registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login docker.pkg.github.com -u ${{ github.actor }} --password-stdin

      - name: Push image
        run: |
          IMAGE_ID=docker.pkg.github.com/bluescar/cfb-api/$IMAGE_NAME

          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')

          # Use Docker `latest` tag convention
          [ "$VERSION" == "master" ] && VERSION=latest

          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION

          docker tag image $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$VERSION
  deploy:
    needs: push
    runs-on: ubuntu-latest
    steps:
    - name: Deploy via SSH
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        password: ${{ secrets.PASSWORD }}
        script: |
          cd /docker/cfb
          docker pull docker.pkg.github.com/bluescar/cfb-api/cfb-api
          docker-compose up -d
  publish-js:
    needs: deploy
    runs-on: ubuntu-latest
    env:
      GIT_TOKEN: ${{ secrets.GIT_TOKEN }}
    steps:
      - name: Install dependencies
        run: |
          sudo apt install wget -y
          sudo apt install unzip -y
          sudo apt install jq -y
          sudo apt install curl -y
      - name: Git config
        run: |
          git config --global user.email "radjewwj@gmail.com"
          git config --global user.name "BlueSCar"
      - name: Generate library
        id: lib
        run: |
          code=$(curl -X POST -H "content-type:application/json" -d '{"swaggerUrl": "https://api.collegefootballdata.com/api-docs.json", "options": {"projectName": "cfb.js", "moduleName": "cfb", "licenseName": "MIT", "usePromises": "true", "useES6": "true"}}' https://generator.swagger.io/api/gen/clients/javascript | jq '. | .code')
          code=${code%\"}
          code=${code#\"}
          echo "::set-output name=code::$code"
      - name: Extract and push
        run: |
          wget https://generator.swagger.io/api/gen/download/${{ steps.lib.outputs.code }}
          unzip ${{ steps.lib.outputs.code }}
          cd javascript-client
          /bin/sh ./git_push.sh bluescar cfb.js "{{ github.event.commits[0].message }}"
